{"version":3,"sources":["components/InputForm/InputFields.js","components/InputForm/InputSection.js","components/InputForm/Export.js","components/InputForm/AutoFillButtons.js","components/InputForm/InputForm.js","components/Preview/PreviewFields.js","components/Preview/PreviewSection.js","components/Preview/CVPreview.js","components/Main.js","App.js","index.js"],"names":["InputFields","props","state","completedFields","handleChange","bind","handleRemove","key","value","this","setState","className","stateKey","Object","keys","templateFields","map","index","type","placeholder","onChange","event","target","onDataEntry","onClick","removeField","React","Component","InputSection","buttonText","object","id","newField","ExportPDF","input","document","getElementById","html2canvas","scale","then","canvas","image","toDataURL","pdf","jsPDF","addImage","save","convertToPDF","AutoFillButtons","replaceState","contactInfo","firstName","lastName","phoneNumber","email","address","uniqid","projects","projectName","languages","projectLink","description","workExperience","jobTitle","companyName","location","datesEmployed","responsibilities","education","university","graduationDate","degree","major","gpa","websites","website","skills","skill","InputForm","templates","stateKeys","Export","PreviewFields","text","length","chunks","split","string","PreviewSection","Preview","Main","filled","empty","concat","slice","subkey","prevState","newState","updateState","createNewField","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.75f92fe8.chunk.js","sourcesContent":["import React from 'react';\nimport './Styles/InputForm.css';\n\n/*\nThis class component recieves an object and renders input fields for each \nkey other than 'responsibilities' and 'description'.\n(these return a textarea in order to capture new lines.)\nOn input, elements call props.onDataEntry which links back to updateState in Main.js\n\nA button is appended following the input fields if the data recieved is not contactInfo\n(Contact Info is stored as a single object, not an array of objects, so it does not receive a remove button.)\nWhen the button is clicked and state updates, React recognizes the change and removes the corresponding elements from the DOM.\n*/\n\nclass InputFields extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...this.props.completedFields}\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n\n  }\n\n  handleChange(key, value){\n    this.setState({ [key]: value})\n  }\n\n  handleRemove(){\n    this.setState({...this.props.completedFields})\n  }\n\n\n  render(){\n    return (\n      <div className = {this.props.stateKey + 'Input'}>\n           {\n             Object.keys(this.props.templateFields).map((key, index) => {\n                if(key !== 'responsibilities' && key !== 'description'){\n                  return <input \n                    className = {key + 'Input'}\n                    type = 'text'\n                    value = {this.state[key]}\n                    key = {key}\n                    placeholder = {this.props.templateFields[key]}\n                    onChange = {(event) => {\n                      this.handleChange(key, event.target.value);\n                      this.props.onDataEntry(this.props.stateKey, key, event.target.value, this.props.index);\n                    }}\n                  />\n                } else {\n                  return <textarea\n                    className = {key + 'Input'}\n                    key = {key}\n                    placeholder = {this.props.templateFields[key]}\n                    value = {this.state[key]}\n                    onChange = {(event) => {\n                      this.handleChange(key, event.target.value);\n                      this.props.onDataEntry(this.props.stateKey, key, event.target.value, this.props.index)\n                    }}\n                  />\n                }\n              })\n            }\n            {\n              this.props.stateKey !== 'contactInfo' ? \n                <input type = 'submit' className = 'deleteButton' onClick = {() => {\n                  this.props.removeField(this.props.stateKey, this.props.index)\n                  this.handleRemove();      \n                }} value = 'Delete' /> : ''\n            }\n  \n      </div>\n    )\n  }\n}\n\n\nexport default InputFields;\n","import React from 'react';\nimport InputFields from './InputFields';\nimport './Styles/InputForm.css';\n\n/*\nThis component recieves an array of objects stored in props.completedFields,\nthen calls InputFields for each one, rendering them in the DOM.\n\nThe button at the bottom links back to createNewField in Main.js, \nwhich updates state by replacing the corresponding key's data with a copy of its data + a new object.\nReact then recognizes this and renders a new set of fields for the User to fill in.\n*/\nfunction InputSection(props){\n  return (\n    <div className = {props.stateKey + 'Container'}>\n      <h2>{props.buttonText}</h2>\n\n      {\n        props.completedFields.map((object, index) => {\n          return <InputFields \n            index = {index}\n            key = {object.id}\n            completedFields = {object}\n            templateFields = {props.templateFields}\n            removeField = {(key, index) => props.removeField(key, index)}\n            onDataEntry = {props.onDataEntry}\n            stateKey = {props.stateKey}\n          />\n        })\n      }\n      \n      <input \n        type = 'submit'\n        className = {'addContentButton'}\n        onClick = {() => props.newField(props.stateKey)}\n        value = {'Add ' + props.buttonText}\n      />\n\n      <hr></hr>\n    </div>\n  )\n}\n\nexport default InputSection;\n","import React from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport './Styles/InputForm.css';\n/*\n  On button press, this component takes the div element CVPreview and creates an image using\n  Html2Canvas at scale:2 to increase quality, then passes that image to jsPDF which\n  turns it into a pdf.\n  The user is then prompted to save that pdf.\n*/\n\nclass ExportPDF extends React.Component {\n  convertToPDF(){\n    const input = document.getElementById('CVPreview');\n    html2canvas(input,{\n      scale: 2,\n    })\n      .then((canvas) => {\n        const image = canvas.toDataURL('img/png');\n        const pdf = new jsPDF();\n        pdf.addImage(image, 'JPEG', 0, 0, 210, 297);\n        pdf.save('Resume.pdf');\n      })\n  }\n\n  render(){\n    return <button className = 'exportButton' onClick = {() => {this.convertToPDF()}}>Save PDF</button>\n  }\n}\n\nexport default ExportPDF;\n","import uniqid from 'uniqid';\nimport './Styles/InputForm.css';\n\n\n// When clicked these buttons call setState with the provided to in order to render a sample resume or clear the current resume\nfunction AutoFillButtons(props){\n  return (\n    <div className = 'autofillbuttons'>\n      <button type = 'submit' onClick = {() => {      \n        props.replaceState(\n          {\n            contactInfo: {firstName: 'Jonathan',lastName: 'Lui',phoneNumber: '(000)000-0000',email: 'sample@email.com',address: '82 Lorem Ipsum Drive, Foobartown, NY, 99823', id: uniqid(),},\n            projects: [{projectName: 'Battleship',languages: '(Javascript, HTML, CSS, Jest)',projectLink: 'https://github.com/jonslui/battleship',description: 'A recreation of the classic oceanic strategy game developed with the goal of practicing Test Driven Development using Jest.\\nFocused on keeping functions pure and modularizing code.',id: uniqid(),},{projectName: 'Weather App',languages: '(Javascript, APIs, HTML, CSS)',projectLink: 'https://github.com/jonslui/weather_app',description: 'A weather application created to practice integrating APIs and Async/Await functions.\\nIt utilizes two APIs, Nomanatim and OpenWeatherMap, to get location data and weather data corresponding to user input. It saves the user’s last searched location in localStorage for faster lookup on its next open.',id: uniqid(),},{projectName: 'CV Builder',languages: ' (Javascript, React, CSS, HTML)',projectLink: 'https://github.com/jonslui/cv_builder',description: 'An Javascript application built using React. It updates state as the user inputs data and renders it on the preview page.\\nThe resulting CV can be saved as a PDF for application purposes.',id: uniqid(),}],\n            workExperience: [{jobTitle: 'Language Lead at',companyName: 'Translation Company;',location: 'Remote',datesEmployed: 'July 2020 – Current',responsibilities: \"Provide translation and proofreading services for multiple projects/companies including Tencent's Player Unknown's Battlegrounds and Arena of Valor.\\nMaintain quick and effective communication between companies to meet tight deadlines and provide accurate translations and localizations.\",id: uniqid(),},{jobTitle: 'Translation/Localization at',companyName: 'Translation Company;',location: 'Beijing, China',datesEmployed: 'July 2018 – May 2020',responsibilities: \"Organized and maintained multiple projects with Localization Companies to make sure content was translated into 15+ languages before deadlines.\\nTranslated/Localized all needed documentation from Chinese to English, e.g. Law Documentation, Game Updates, All in- game language, messages to Players, new position openings etc.\\nCrafted in-game language to provoke the intended response in players, e.g. marketing/advertising campaigns to entice players to spend time and money in the game.\\nHelped plan new content, stories, and machines for the casinos and solitaire games.\",id: uniqid(),}],\n            education: [{university: 'The Pennsylvania State University',graduationDate: '08/2013 - 12/2016',degree: \"Bachelor's degrees in\",major: 'English and Comparative Literature',gpa: 'GPA: 3.91',id: uniqid(),}],\n            websites: [{ website: \"www.github.com/jonslui\", id: uniqid() },{ website: \"www.linkedin.com/jonslui\", id: uniqid() }],\n            skills: [{ skill: '• Javascript', id: uniqid() },{ skill: '• React', id: uniqid() },{ skill: '• Jest', id: uniqid() },{ skill: '• CSS', id: uniqid() },{ skill: '• HTML', id: uniqid() },{ skill: '• Git', id: uniqid() },{ skill: '• Mandarin (Fluent)', id: uniqid() },],\n          }\n      )}}>Load Sample Resume</button>\n\n      <button type = 'submit' onClick = {() => {props.replaceState(\n        {\n          contactInfo: {firstName: '',lastName: '',phoneNumber: '',email: '',address: '', id: uniqid(),},\n          projects: [],\n          workExperience: [],\n          education: [],\n          websites: [],\n          skills: [],      \n        }\n      )}}>Clear Resume</button>\n    </div>\n    \n  )  \n}\n\nexport default AutoFillButtons;","import InputFields from './InputFields';\nimport InputSection from './InputSection';\nimport ExportPDF from './Export';\nimport AutoFillButtons from './AutoFillButtons';\nimport './Styles/InputForm.css';\n\n/*\nContact Info is called using the InputFields component because\nits data is kept as a singular object in state.\nWork Experience, Projects, Education, Websites, and Skills are rendered using the Experience component\nbecause their information is held as an array of Objects in state.\n*/\nfunction InputForm(props){\n  return (\n    <div className = 'InputForm'>\n      <h1>CV Builder</h1>\n\n      <AutoFillButtons \n        replaceState = {props.replaceState}\n      />\n\n      <h2>Contact Info</h2>\n      <InputFields \n        stateKey = 'contactInfo' \n        key = {props.contactInfo.id}\n        completedFields = {props.contactInfo}\n        templateFields = {props.templates.contactInfo}\n        onDataEntry = {props.onDataEntry}\n      />\n      <hr/>\n\n    {\n      props.stateKeys.map((key, index) => {\n        return <InputSection\n          stateKey = {key}\n          key = {key}\n          buttonText = {props.buttonText[index]}\n          completedFields = {props[key]}\n          templateFields = {props.templates[key]}\n          onDataEntry = {props.onDataEntry}\n          newField = {props.newField}\n          removeField = {props.removeField}\n        \n        />\n      })\n    }\n\n      <ExportPDF />\n    </div>\n    )\n}\n\nexport default InputForm;\n","/*\n  This component recieves an object from state and creates divs/applies the neccessary styling\n  to each key in the object. \n  If a key doesn't contain any data, it uses the template data for that key.\n\n  If the key name is 'description' or 'responsibilities' it creates an unordered list instead\n  so \\n will be rendered as bullet points.\n*/\nfunction PreviewFields(props){\n  return (\n    <div className = {props.stateKey + 'Preview'}>\n      {\n        Object.keys(props.templateFields).map((key) => {\n          let text = props.completedFields[key].length > 0 ? props.completedFields[key] : props.templateFields[key]\n          if(key !== 'responsibilities' && key !== 'description'){            \n            return <div className = {key + 'Preview'} key = {key}> {text} </div>\n          } else {\n            let chunks = text.split('\\n')\n            return <ul className = {key + 'Preview'} key = {key}>\n              {\n                chunks.map((string, index) => { return <li key = {index}> {string} </li> })\n              }\n              </ul>\n            }\n        })\n      }\n    </div>\n  )\n}\n\nexport default PreviewFields;","import PreviewFields from './PreviewFields';\nimport './Styles/CVPreview.css'\n/*\n  This component recieves an array of data from CVPreview and then creates Fields Components\n  for each object in the array.\n\n  If there are objects in the array, add a <hr> to separate sections\n*/\nfunction PreviewSection(props){\n  return (\n    <div>\n      <div className = {props.stateKey + 'Section'}>\n        {\n          props.completedFields.map((object) => {\n              return <PreviewFields\n                key = {object.id}\n                stateKey = {props.stateKey}\n                completedFields = {object}\n                templateFields = {props.templateFields}\n            />\n          }) \n        }\n      </div>\n      \n      {\n        props.completedFields.length > 0 ? <hr/> : ''  \n      }\n    </div>\n    \n  )\n}\n\nexport default PreviewSection;","import PreviewSection from './PreviewSection';\nimport PreviewFields from './PreviewFields';\nimport './Styles/CVPreview.css';\n\n/*\n  This component creates a Section Component for each key in the props.stateKeys array,\n  which correspond to data keys keep in state, and Fields component for Contact Info since\n  that data is not stored as an array in state.\n  These called components return div elements that populate the CV page.\n*/\nfunction Preview(props){\n  return (\n    <div id = 'CVPreview'>\n      <PreviewFields \n        stateKey = {'names'}\n        completedFields = {{\n          firstName: props.contactInfo.firstName,\n          lastName: props.contactInfo.lastName,\n        }}\n        templateFields = {{\n          firstName: props.templates.contactInfo.firstName,\n          lastName: props.templates.contactInfo.lastName\n        }}\n      />\n\n      <PreviewFields\n        stateKey = {'personalInfo'}\n        completedFields = {{\n          phoneNumber: props.contactInfo.phoneNumber,\n          email: props.contactInfo.email,\n          address: props.contactInfo.address\n        }}\n        templateFields = {{\n          phoneNumber: props.templates.contactInfo.phoneNumber,\n          email: props.templates.contactInfo.email,\n          address: props.templates.contactInfo.address\n        }}\n      />\n      \n      <hr/>\n\n      {\n        props.stateKeys.map((key) => {\n          return <PreviewSection \n            key = {key + 'Section'}\n            stateKey = {key}\n            completedFields = {props[key]}\n            templateFields = {props.templates[key]}\n          />\n        })\n      }\n    </div>\n  )\n}\n\nexport default Preview","import React from 'react';\nimport InputForm from './InputForm/InputForm';\nimport Preview from './Preview/CVPreview';\nimport uniqid from 'uniqid';\nimport './Main.css';\n\n\nclass Main extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      templates: {\n        filled: {\n          contactInfo: {\n            firstName: 'First Name',\n            lastName: 'Last Name',\n            phoneNumber: 'Phone Number',\n            email: 'Email Address',\n            address: 'Address',\n          },\n          projects: {\n            projectName: 'Project Name',\n            languages: 'Languages Used',\n            projectLink: 'Link',\n            description: 'Description',\n          },\n          workExperience: {\n            jobTitle: 'Job Title',\n            companyName: 'Company Name',\n            location: 'Location',\n            datesEmployed: 'Dates Employed',\n            responsibilities: 'Responsibilities',\n          },\n          education: {\n            university: 'University',\n            graduationDate: 'Graduation date',\n            degree: 'Degree',\n            major: 'Major',\n            gpa: 'GPA',\n          },\n          websites: {\n            website: 'www.example.com',\n          },\n          skills:{\n            skill: 'Skill',\n          }\n        },\n        empty : {\n          contactInfo: {\n            firstName: '',\n            lastName: '',\n            phoneNumber: '',\n            email: '',\n            address: '',\n          },\n          projects: {\n            projectName: '',\n            languages: '',\n            projectLink: '',\n            description: '',\n          },\n          workExperience: {\n            jobTitle: '',\n            companyName: '',\n            location: '',\n            datesEmployed: '',\n            responsibilities: '',\n          },\n          education: {\n            university: '',\n            graduationDate: '',\n            degree: '',\n            major: '',\n            gpa: '',\n          },\n          websites: {\n            website: '',\n\n          },\n          skills:{\n            skill: '',\n          }\n        },\n      },\n      contactInfo: {\n        firstName: '',\n        lastName: '',\n        phoneNumber: '',\n        email: '',\n        address: '',\n        id: uniqid(),\n      },\n      projects: [],\n      workExperience: [],\n      education: [],\n      websites: [],\n      skills: [],\n    }\n  }\n  \n  /*  \n  This function is called by a button pressed from in the Experience component (affects state.workExperience/education/websites/skills)\n  It copies a template object into the corresponding array in state, rendering in the DOM.\n  */\n  createNewField(key){\n    this.setState({\n      [key] : this.state[key].concat({...this.state.templates.empty[key], id: uniqid()}),\n      \n    })\n  }\n\n  /*\n  This function is called by a button created in an instance of InputFields.\n  It recieves key and index values and replaces the array at the key location with a copy of that array minus array[index].\n  */\n  removeField(key, index){\n    this.setState({\n      [key] : [...this.state[key].slice(0, index), ...this.state[key].slice(index + 1)]\n    })\n  }\n\n  /*\n  This function is called with each character entered in an instance of InputFields.\n  The if statement separates setState logic for keys that only contain a single object (contactInfo) \n  and keys that contain an array of objects (WorkExperience, Education, Websites, Skills). \n  */\n  updateState(key, subkey, value, index){\n    if (key === 'contactInfo') {\n      this.setState(prevState => ({\n        [key]: {\n          ...prevState[key],\n          [subkey]: value,\n        }\n      }))\n    } else {\n      this.setState((prevState) => ({\n        [key]: [ \n          ...prevState[key].slice(0, index),\n          {\n            ...prevState[key][index],\n            [subkey]: value,\n          },\n          ...prevState[key].slice(index + 1)\n        ]\n      }));\n    }\n  }\n\n  /*\n    This function is called by an instance of AutoFillButtons contained in InputForms.\n    It passes an object named newState with sample data for:\n    contactInfo, projects, workExperience, education, websites, and skills\n  */\n  replaceState(newState){\n    this.setState(newState)\n  }\n\n\n  render(){\n    return (\n      <div className = 'InputAndPreviewContainer'>\n        <InputForm \n          stateKeys = {['websites', 'projects', 'workExperience', 'education', 'skills']}\n          buttonText = {['Website', 'Project', 'Work Experience', 'Education', 'Skills']}        \n          templates = {this.state.templates.filled}\n          contactInfo = {this.state.contactInfo}\n          websites = {this.state.websites}\n          projects = {this.state.projects}\n          workExperience = {this.state.workExperience}\n          education = {this.state.education}\n          skills = {this.state.skills}\n          onDataEntry = {(key, subkey, value, index) => this.updateState(key, subkey, value, index)}\n          newField = {(key) => this.createNewField(key)}\n          removeField = {(key, index) => this.removeField(key, index)}\n          replaceState = {(newState) => this.replaceState(newState)}\n        />\n        \n        <Preview\n          stateKeys = {['websites', 'projects', 'workExperience', 'education', 'skills']}\n          templates = {this.state.templates.filled}\n          contactInfo = {this.state.contactInfo}\n          websites = {this.state.websites}\n          projects = {this.state.projects}\n          workExperience = {this.state.workExperience}\n          education = {this.state.education}\n          skills = {this.state.skills}\n        />\n\n      </div> \n    )\n  }\n}\n\nexport default Main;\n","import Main from './components/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div id = 'content'>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}